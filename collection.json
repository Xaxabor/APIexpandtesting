{
	"info": {
		"_postman_id": "ef4255b8-26ef-449c-bf37-851f88707ee0",
		"name": "Notes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17473675"
	},
	"item": [
		{
			"name": "Positive CRUD Operation",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var token = jsonData.data.token;\r",
									"pm.collectionVariables.set(\"acessToken\", token);\r",
									"var userID = jsonData.data.id;\r",
									"pm.collectionVariables.set(\"userId\", userID);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is : Login successful\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation\", function () {\r",
									"    const sch = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            success: {\r",
									"                type: \"boolean\",\r",
									"            },\r",
									"            status: {\r",
									"                type: \"number\",\r",
									"            },\r",
									"            message: {\r",
									"                type: \"string\",\r",
									"            },\r",
									"            data: {\r",
									"                id: {\r",
									"                    type: \"string\",\r",
									"                },\r",
									"                name: {\r",
									"                    type: \"string\",\r",
									"                },\r",
									"                email: {\r",
									"                    type: \"string\",\r",
									"                },\r",
									"                token: {\r",
									"                    type: \"string\",\r",
									"                },\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"    pm.response.to.have.jsonSchema(sch)\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{userEmail}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "createNote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    var noteid = jsonData.data.id;\r",
									"    pm.collectionVariables.set(\"noteId\", noteid);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Note successfully created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify title\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let title = pm.collectionVariables.get(\"title\");\r",
									"    pm.expect(jsonData.data.title).to.eql(title);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let description = pm.collectionVariables.get(\"description\");\r",
									"    pm.expect(jsonData.data.description).to.eql(description);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify category\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let category = pm.collectionVariables.get(\"category\");\r",
									"    pm.expect(jsonData.data.category).to.eql(category);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify completed status\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.completed).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify created user ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let userId = pm.collectionVariables.get(\"userId\");\r",
									"    pm.expect(jsonData.data.user_id).to.eql(userId);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation\", function () {\r",
									"    const sch = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            success: {\r",
									"                type: \"boolean\",\r",
									"            },\r",
									"            status: {\r",
									"                type: \"number\",\r",
									"            },\r",
									"            message: {\r",
									"                type: \"string\",\r",
									"            },\r",
									"            data: {\r",
									"                type: \"object\", // Added type for data\r",
									"                properties: {\r",
									"                    id: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    title: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    description: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    category: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    completed: {\r",
									"                        type: \"boolean\",\r",
									"                    },\r",
									"                    created_at: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    updated_at: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    user_id: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                },\r",
									"                required: [\"id\", \"title\", \"description\", \"category\", \"completed\", \"created_at\", \"updated_at\", \"user_id\"] // Added required fields\r",
									"            }\r",
									"        },\r",
									"        required: [\"success\", \"status\", \"message\", \"data\"] // Added required fields\r",
									"    }\r",
									"    pm.response.to.have.jsonSchema(sch);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const options = [\"Work\", \"Home\", \"Personal\"];\r",
									"const randomIndex = Math.floor(Math.random() * options.length);\r",
									"const selectedOption = options[randomIndex];\r",
									"\r",
									"pm.collectionVariables.set(\"category\", selectedOption);\r",
									"\r",
									"\r",
									"// Generate a random title and description\r",
									"function getRandomString(minLen, maxLen) {\r",
									"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ';\r",
									"    const length = Math.floor(Math.random() * (maxLen - minLen + 1)) + minLen;\r",
									"    let result = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
									"    }\r",
									"    return result.trim(); // remove extra space at ends\r",
									"}\r",
									"\r",
									"// Generate title and description between 5â€“100 characters\r",
									"const title = getRandomString(4, 10);\r",
									"const description = getRandomString(4, 50);\r",
									"\r",
									"// Set collection variables\r",
									"pm.collectionVariables.set(\"title\", title);\r",
									"pm.collectionVariables.set(\"description\", description);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "{{title}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "{{description}}",
									"type": "text"
								},
								{
									"key": "category",
									"value": "{{category}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCreatedNoteData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    var noteid = jsonData.data.id;\r",
									"    pm.collectionVariables.set(\"noteId\", noteid);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Note successfully retrieved\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify title\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let title = pm.collectionVariables.get(\"title\");\r",
									"    pm.expect(jsonData.data.title).to.eql(title);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let description = pm.collectionVariables.get(\"description\");\r",
									"    pm.expect(jsonData.data.description).to.eql(description);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify category\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let category = pm.collectionVariables.get(\"category\");\r",
									"    pm.expect(jsonData.data.category).to.eql(category);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify completed status\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.completed).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify created user ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let userId = pm.collectionVariables.get(\"userId\");\r",
									"    pm.expect(jsonData.data.user_id).to.eql(userId);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation\", function () {\r",
									"    const sch = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            success: {\r",
									"                type: \"boolean\",\r",
									"            },\r",
									"            status: {\r",
									"                type: \"number\",\r",
									"            },\r",
									"            message: {\r",
									"                type: \"string\",\r",
									"            },\r",
									"            data: {\r",
									"                type: \"object\", // Added type for data\r",
									"                properties: {\r",
									"                    id: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    title: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    description: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    category: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    completed: {\r",
									"                        type: \"boolean\",\r",
									"                    },\r",
									"                    created_at: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    updated_at: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    user_id: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                },\r",
									"                required: [\"id\", \"title\", \"description\", \"category\", \"completed\", \"created_at\", \"updated_at\", \"user_id\"] // Added required fields\r",
									"            }\r",
									"        },\r",
									"        required: [\"success\", \"status\", \"message\", \"data\"] // Added required fields\r",
									"    }\r",
									"    pm.response.to.have.jsonSchema(sch);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateNote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    var noteid = jsonData.data.id;\r",
									"    pm.collectionVariables.set(\"noteId\", noteid);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Note successfully Updated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify title\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let title = pm.collectionVariables.get(\"title\");\r",
									"    pm.expect(jsonData.data.title).to.eql(title);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let description = pm.collectionVariables.get(\"description\");\r",
									"    pm.expect(jsonData.data.description).to.eql(description);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify category\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let category = pm.collectionVariables.get(\"category\");\r",
									"    pm.expect(jsonData.data.category).to.eql(category);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify completed status\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.completed).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify created user ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let userId = pm.collectionVariables.get(\"userId\");\r",
									"    pm.expect(jsonData.data.user_id).to.eql(userId);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation\", function () {\r",
									"    const sch = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            success: {\r",
									"                type: \"boolean\",\r",
									"            },\r",
									"            status: {\r",
									"                type: \"number\",\r",
									"            },\r",
									"            message: {\r",
									"                type: \"string\",\r",
									"            },\r",
									"            data: {\r",
									"                type: \"object\", // Added type for data\r",
									"                properties: {\r",
									"                    id: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    title: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    description: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    category: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    completed: {\r",
									"                        type: \"boolean\",\r",
									"                    },\r",
									"                    created_at: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    updated_at: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    user_id: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                },\r",
									"                required: [\"id\", \"title\", \"description\", \"category\", \"completed\", \"created_at\", \"updated_at\", \"user_id\"] // Added required fields\r",
									"            }\r",
									"        },\r",
									"        required: [\"success\", \"status\", \"message\", \"data\"] // Added required fields\r",
									"    }\r",
									"    pm.response.to.have.jsonSchema(sch);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const options = [\"Work\", \"Home\", \"Personal\"];\r",
									"const randomIndex = Math.floor(Math.random() * options.length);\r",
									"const selectedOption = options[randomIndex];\r",
									"\r",
									"pm.collectionVariables.set(\"category\", selectedOption);\r",
									"\r",
									"\r",
									"// Generate a random title and description\r",
									"function getRandomString(minLen, maxLen) {\r",
									"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ';\r",
									"    const length = Math.floor(Math.random() * (maxLen - minLen + 1)) + minLen;\r",
									"    let result = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
									"    }\r",
									"    return result.trim(); // remove extra space at ends\r",
									"}\r",
									"\r",
									"// Generate title and description between 5â€“100 characters\r",
									"const title = getRandomString(4, 10);\r",
									"const description = getRandomString(4, 50);\r",
									"\r",
									"// Set collection variables\r",
									"pm.collectionVariables.set(\"title\", \"Updated \" + title);\r",
									"pm.collectionVariables.set(\"description\", \"Updated \" + description);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "{{title}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "{{description}}",
									"type": "text"
								},
								{
									"key": "completed",
									"value": "false",
									"type": "text"
								},
								{
									"key": "category",
									"value": "{{category}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUpdatedNoteData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    var noteid = jsonData.data.id;\r",
									"    pm.collectionVariables.set(\"noteId\", noteid);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Note successfully retrieved\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify title\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let title = pm.collectionVariables.get(\"title\");\r",
									"    pm.expect(jsonData.data.title).to.eql(title);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let description = pm.collectionVariables.get(\"description\");\r",
									"    pm.expect(jsonData.data.description).to.eql(description);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify category\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let category = pm.collectionVariables.get(\"category\");\r",
									"    pm.expect(jsonData.data.category).to.eql(category);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify completed status\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.completed).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify created user ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let userId = pm.collectionVariables.get(\"userId\");\r",
									"    pm.expect(jsonData.data.user_id).to.eql(userId);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation\", function () {\r",
									"    const sch = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            success: {\r",
									"                type: \"boolean\",\r",
									"            },\r",
									"            status: {\r",
									"                type: \"number\",\r",
									"            },\r",
									"            message: {\r",
									"                type: \"string\",\r",
									"            },\r",
									"            data: {\r",
									"                type: \"object\", // Added type for data\r",
									"                properties: {\r",
									"                    id: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    title: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    description: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    category: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    completed: {\r",
									"                        type: \"boolean\",\r",
									"                    },\r",
									"                    created_at: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    updated_at: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                    user_id: {\r",
									"                        type: \"string\",\r",
									"                    },\r",
									"                },\r",
									"                required: [\"id\", \"title\", \"description\", \"category\", \"completed\", \"created_at\", \"updated_at\", \"user_id\"] // Added required fields\r",
									"            }\r",
									"        },\r",
									"        required: [\"success\", \"status\", \"message\", \"data\"] // Added required fields\r",
									"    }\r",
									"    pm.response.to.have.jsonSchema(sch);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteNote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Note successfully deleted\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation\", function () {\r",
									"    const sch = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            success: {\r",
									"                type: \"boolean\",\r",
									"            },\r",
									"            status: {\r",
									"                type: \"number\",\r",
									"            },\r",
									"            message: {\r",
									"                type: \"string\",\r",
									"            },\r",
									"        }\r",
									"    }\r",
									"    pm.response.to.have.jsonSchema(sch);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/notes/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getDeletedNoteData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"No note was found with the provided ID, Maybe it was deleted\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema validation\", function () {\r",
									"    const sch = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            success: {\r",
									"                type: \"boolean\",\r",
									"            },\r",
									"            status: {\r",
									"                type: \"number\",\r",
									"            },\r",
									"            message: {\r",
									"                type: \"string\",\r",
									"            },\r",
									"        }\r",
									"    }\r",
									"    pm.response.to.have.jsonSchema(sch);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Login Scenario",
			"item": [
				{
					"name": "1_InvalidEmailInvalidShortPasswordLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    var jsonData = pm.response.json();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is : A valid email address is required\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"A valid email address is required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.variables.unset(\"email\");\r",
									"// pm.environment.unset(\"email\");\r",
									"// pm.collectionVariables.unset(\"email\");\r",
									"// pm.variables.unset(\"pass\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "demo",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Short",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "2_NoEmailNoPasswordLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    var jsonData = pm.response.json();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is : A valid email address is required\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"A valid email address is required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.variables.unset(\"email\");\r",
									"// pm.environment.unset(\"email\");\r",
									"// pm.collectionVariables.unset(\"email\");\r",
									"// pm.variables.unset(\"pass\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "3_NoEmailValidPasswordLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    var jsonData = pm.response.json();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is : A valid email address is required\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"A valid email address is required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.variables.unset(\"email\");\r",
									"// pm.environment.unset(\"email\");\r",
									"// pm.collectionVariables.unset(\"email\");\r",
									"// pm.variables.unset(\"pass\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "demo111",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "4_InvalidEmailNoPasswordLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    var jsonData = pm.response.json();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is : A valid email address is required\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"A valid email address is required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.variables.unset(\"email\");\r",
									"// pm.environment.unset(\"email\");\r",
									"// pm.collectionVariables.unset(\"email\");\r",
									"// pm.variables.unset(\"pass\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "demo",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "5_InvalidEmailValidPasswordLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    var jsonData = pm.response.json();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is : A valid email address is required\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"A valid email address is required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.variables.unset(\"email\");\r",
									"// pm.environment.unset(\"email\");\r",
									"// pm.collectionVariables.unset(\"email\");\r",
									"// pm.variables.unset(\"pass\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "demo111",
									"type": "text"
								},
								{
									"key": "password",
									"value": "demo111",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "6_ValidEmailNoPasswordLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    var jsonData = pm.response.json();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is : Password must be between 6 and 30 characters\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Password must be between 6 and 30 characters\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.variables.unset(\"email\");\r",
									"// pm.environment.unset(\"email\");\r",
									"// pm.collectionVariables.unset(\"email\");\r",
									"// pm.variables.unset(\"pass\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "demo111@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "7_ValidEmailInvalidPasswordLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    var jsonData = pm.response.json();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is : Password must be between 6 and 30 characters\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Password must be between 6 and 30 characters\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.variables.unset(\"email\");\r",
									"// pm.environment.unset(\"email\");\r",
									"// pm.collectionVariables.unset(\"email\");\r",
									"// pm.variables.unset(\"pass\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "demo111@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Short",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "8_CorrectEmailIncorrectPasswordLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    var jsonData = pm.response.json();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is : Incorrect email address or password\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Incorrect email address or password\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.variables.unset(\"email\");\r",
									"// pm.environment.unset(\"email\");\r",
									"// pm.collectionVariables.unset(\"email\");\r",
									"// pm.variables.unset(\"pass\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "demo111@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "demo112",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "9_ValidIncorrectEmailCorrectPasswordLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    var jsonData = pm.response.json();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is : Incorrect email address or password\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Incorrect email address or password\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.variables.unset(\"email\");\r",
									"// pm.environment.unset(\"email\");\r",
									"// pm.collectionVariables.unset(\"email\");\r",
									"// pm.variables.unset(\"pass\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "demo222@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "demo111",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "10_InvalidEmailInvalidLongPasswordLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    var jsonData = pm.response.json();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is : A valid email address is required\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"A valid email address is required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.variables.unset(\"email\");\r",
									"// pm.environment.unset(\"email\");\r",
									"// pm.collectionVariables.unset(\"email\");\r",
									"// pm.variables.unset(\"pass\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "demo",
									"type": "text"
								},
								{
									"key": "password",
									"value": "longlonglonglonglonglonglonglon",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "11_ValidEmailInvalidLongPasswordLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    var jsonData = pm.response.json();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message is : Password must be between 6 and 30 characters\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Password must be between 6 and 30 characters\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.variables.unset(\"email\");\r",
									"// pm.environment.unset(\"email\");\r",
									"// pm.collectionVariables.unset(\"email\");\r",
									"// pm.variables.unset(\"pass\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "demo111@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "longlonglonglonglonglonglonglon",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Create Note Scenario",
			"item": [
				{
					"name": "1_NoTitleNoDesNoCat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Title must be between 4 and 100 characters\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "",
									"type": "text"
								},
								{
									"key": "category",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "2_ShortTitleValidDesValidCat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Title must be between 4 and 100 characters\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "sds",
									"type": "text"
								},
								{
									"key": "description",
									"value": "sadfsa",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Home",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "3_LongTitleValidDesValidCat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Title must be between 4 and 100 characters\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongl",
									"type": "text"
								},
								{
									"key": "description",
									"value": "sadfsa",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Home",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "4_ValidTitleNoDesValidCat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Description must be between 4 and 1000 characters\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "valid",
									"type": "text"
								},
								{
									"key": "description",
									"value": "",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Home",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "5_ValidTitleShortDesValidCat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Description must be between 4 and 1000 characters\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "valid",
									"type": "text"
								},
								{
									"key": "description",
									"value": "shr",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Home",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "6_ValidTitleLongDesValidCat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Description must be between 4 and 1000 characters\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "valid",
									"type": "text"
								},
								{
									"key": "description",
									"value": "longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongl",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Home",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "7_ValidTitleValidDesNoCat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Category must be one of the categories: Home, Work, Personal\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "valid",
									"type": "text"
								},
								{
									"key": "description",
									"value": "valid description",
									"type": "text"
								},
								{
									"key": "category",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "8_ValidTitleValidDesInvalidCat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Category must be one of the categories: Home, Work, Personal\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "valid",
									"type": "text"
								},
								{
									"key": "description",
									"value": "valid description",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Mine",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "9_InvalidAccessTokenTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Access token is not valid or has expired, you will need to login\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "garbageToken"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "valid",
									"type": "text"
								},
								{
									"key": "description",
									"value": "valid description",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Home",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "10_ExpiredAccessTokenTest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Access token is not valid or has expired, you will need to login\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "be21423f84564d7bbdcb99b4b1bfa0ff62019f04fde845179dabdcf79430fa33"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "valid",
									"type": "text"
								},
								{
									"key": "description",
									"value": "valid description",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Home",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "11_WrongEndpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "valid",
									"type": "text"
								},
								{
									"key": "description",
									"value": "valid description",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Home",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/note",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"note"
							]
						}
					},
					"response": []
				},
				{
					"name": "12_HeaderMissing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{acessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "multipart/form-data",
								"disabled": true
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "valid",
									"type": "text"
								},
								{
									"key": "description",
									"value": "valid",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Home",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Get Note Data Scenario",
			"item": [
				{
					"name": "1_Wrong_URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/note/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"note",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2_InvalidNoteID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Note ID must be a valid ID\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/45643635132asffaasffs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"45643635132asffaasffs"
							]
						}
					},
					"response": []
				},
				{
					"name": "3_ValidDeletedNoteID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"No note was found with the provided ID, Maybe it was deleted\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/68829dee9d1b4b0288669aeb",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"68829dee9d1b4b0288669aeb"
							]
						}
					},
					"response": []
				},
				{
					"name": "4_NoNoteID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData.data.length > 0) {\r",
									"    pm.test(\"Verify Message\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.message).to.eql(\"Notes successfully retrieved\");\r",
									"    });\r",
									"} \r",
									"else {\r",
									"    pm.test(\"Verify Message\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.message).to.eql(\"No notes found\");\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "5_AuthHeaderMissing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/6882a10a9d1b4b0288669b4b",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"6882a10a9d1b4b0288669b4b"
							]
						}
					},
					"response": []
				},
				{
					"name": "6_ExpiredAccessToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Access token is not valid or has expired, you will need to login\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "be21423f84564d7bbdcb99b4b1bfa0ff62019f04fde845179dabdcf79430fa33"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/6882a10a9d1b4b0288669b4b",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"6882a10a9d1b4b0288669b4b"
							]
						}
					},
					"response": []
				},
				{
					"name": "7_InvalidAccessToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Access token is not valid or has expired, you will need to login\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "sdg64656sdg"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/6882a10a9d1b4b0288669b4b",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"6882a10a9d1b4b0288669b4b"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Update (Skipped as It is similar as Create scenarios))",
			"item": []
		},
		{
			"name": "Negative Delete Scenario",
			"item": [
				{
					"name": "1_WrongURL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/note/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"note",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2_InvalidNoteID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Note ID must be a valid ID\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/notes/45643635132asffaasffs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"45643635132asffaasffs"
							]
						}
					},
					"response": []
				},
				{
					"name": "3_ValidAlreadyDeletedNoteID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"No note was found with the provided ID, Maybe it was deleted\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/notes/68829dee9d1b4b0288669aeb",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"68829dee9d1b4b0288669aeb"
							]
						}
					},
					"response": []
				},
				{
					"name": "4_NoNoteID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "5_AuthHeaderMissing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "{{acessToken}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/notes/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6_ExpiredAccessToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Access token is not valid or has expired, you will need to login\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "be21423f84564d7bbdcb99b4b1bfa0ff62019f04fde845179dabdcf79430fa33"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/notes/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "7_InvalidAccessToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Access token is not valid or has expired, you will need to login\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "sdg64656sdg"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/notes/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "7_InvalidAccessToken Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Access token is not valid or has expired, you will need to login\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-auth-token",
								"value": "sdg64656sdg"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrl}}/notes/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://practice.expandtesting.com/notes/api",
			"type": "string"
		},
		{
			"key": "userEmail",
			"value": "demo222@gmail.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "demo222",
			"type": "string"
		},
		{
			"key": "acessToken",
			"value": ""
		},
		{
			"key": "category",
			"value": "",
			"type": "string"
		},
		{
			"key": "title",
			"value": "",
			"type": "string"
		},
		{
			"key": "description",
			"value": "",
			"type": "string"
		},
		{
			"key": "noteId",
			"value": ""
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		}
	]
}